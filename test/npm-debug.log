0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'memwatch' ]
2 info using npm@1.4.27
3 info using node@v0.10.17
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose readDependencies using package.json deps
6 verbose cache add [ 'memwatch', null ]
7 verbose cache add name=undefined spec="memwatch" args=["memwatch",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: 'memwatch',
8 verbose parsed url   path: 'memwatch',
8 verbose parsed url   href: 'memwatch' }
9 silly lockFile 6099d716-memwatch memwatch
10 verbose lock memwatch C:\Users\Sam\AppData\Roaming\npm-cache\6099d716-memwatch.lock
11 silly lockFile 6099d716-memwatch memwatch
12 silly lockFile 6099d716-memwatch memwatch
13 verbose addNamed [ 'memwatch', '' ]
14 verbose addNamed [ null, '*' ]
15 silly lockFile 0703982f-memwatch memwatch@
16 verbose lock memwatch@ C:\Users\Sam\AppData\Roaming\npm-cache\0703982f-memwatch.lock
17 silly addNameRange { name: 'memwatch', range: '*', hasData: false }
18 verbose request where is /memwatch
19 verbose request registry https://registry.npmjs.org/
20 verbose request id d1969eeb2d82d225
21 verbose url raw /memwatch
22 verbose url resolving [ 'https://registry.npmjs.org/', './memwatch' ]
23 verbose url resolved https://registry.npmjs.org/memwatch
24 verbose request where is https://registry.npmjs.org/memwatch
25 info trying registry request attempt 1 at 20:55:47
26 verbose etag "BMTTD3PP3Q1ZSVXOCQ7UTWG9V"
27 http GET https://registry.npmjs.org/memwatch
28 http 304 https://registry.npmjs.org/memwatch
29 silly registry.get cb [ 304,
29 silly registry.get   { date: 'Tue, 23 Sep 2014 18:55:39 GMT',
29 silly registry.get     server: 'Apache',
29 silly registry.get     via: '1.1 varnish',
29 silly registry.get     'last-modified': 'Tue, 23 Sep 2014 18:55:40 GMT',
29 silly registry.get     'cache-control': 'max-age=60',
29 silly registry.get     etag: '"BMTTD3PP3Q1ZSVXOCQ7UTWG9V"',
29 silly registry.get     'x-served-by': 'cache-ams4132-AMS',
29 silly registry.get     'x-cache': 'MISS',
29 silly registry.get     'x-cache-hits': '0',
29 silly registry.get     'x-timer': 'S1411498539.749715,VS0,VE548',
29 silly registry.get     vary: 'Accept',
29 silly registry.get     'content-length': '0',
29 silly registry.get     'keep-alive': 'timeout=10, max=50',
29 silly registry.get     connection: 'Keep-Alive' } ]
30 verbose etag https://registry.npmjs.org/memwatch from cache
31 silly addNameRange number 2 { name: 'memwatch', range: '*', hasData: true }
32 silly addNameRange versions [ 'memwatch',
32 silly addNameRange   [ '0.1.0',
32 silly addNameRange     '0.1.1',
32 silly addNameRange     '0.1.2',
32 silly addNameRange     '0.1.3',
32 silly addNameRange     '0.1.4',
32 silly addNameRange     '0.1.5',
32 silly addNameRange     '0.2.0',
32 silly addNameRange     '0.2.1',
32 silly addNameRange     '0.2.2' ] ]
33 verbose addNamed [ 'memwatch', '0.2.2' ]
34 verbose addNamed [ '0.2.2', '0.2.2' ]
35 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
36 verbose lock memwatch@0.2.2 C:\Users\Sam\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
37 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
38 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
39 silly lockFile 0703982f-memwatch memwatch@
40 silly lockFile 0703982f-memwatch memwatch@
41 silly resolved [ { name: 'memwatch',
41 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
41 silly resolved     version: '0.2.2',
41 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
41 silly resolved     engines: { node: '>= 0.6.0' },
41 silly resolved     repository:
41 silly resolved      { type: 'git',
41 silly resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
41 silly resolved     main: 'include.js',
41 silly resolved     licenses: [ [Object] ],
41 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
41 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
41 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
41 silly resolved     contributors: [ [Object], [Object], [Object] ],
41 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
41 silly resolved     readmeFilename: 'README.md',
41 silly resolved     _id: 'memwatch@0.2.2',
41 silly resolved     dist:
41 silly resolved      { shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
41 silly resolved        tarball: 'http://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' },
41 silly resolved     _from: 'memwatch@',
41 silly resolved     _npmVersion: '1.2.14',
41 silly resolved     _npmUser: { name: 'lloyd', email: 'lloyd@hilaiel.com' },
41 silly resolved     maintainers: [ [Object] ],
41 silly resolved     directories: {},
41 silly resolved     _shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
41 silly resolved     _resolved: 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz',
41 silly resolved     gypfile: true,
41 silly resolved     homepage: 'https://github.com/lloyd/node-memwatch' } ]
42 info install memwatch@0.2.2 into C:\dev\f_
43 info installOne memwatch@0.2.2
44 verbose node_modules\memwatch unbuild
45 verbose tar unpack C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
46 silly lockFile efe2da6b-ar-C-dev-f-node-modules-memwatch tar://C:\dev\f_\node_modules\memwatch
47 verbose lock tar://C:\dev\f_\node_modules\memwatch C:\Users\Sam\AppData\Roaming\npm-cache\efe2da6b-ar-C-dev-f-node-modules-memwatch.lock
48 silly lockFile 6de61186-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
49 verbose lock tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz C:\Users\Sam\AppData\Roaming\npm-cache\6de61186-cache-memwatch-0-2-2-package-tgz.lock
50 silly gunzTarPerm modes [ '777', '666' ]
51 silly gunzTarPerm extractEntry package.json
52 silly gunzTarPerm modified mode [ 'package.json', 420, 438 ]
53 silly gunzTarPerm extractEntry .npmignore
54 silly gunzTarPerm modified mode [ '.npmignore', 420, 438 ]
55 silly gunzTarPerm extractEntry README.md
56 silly gunzTarPerm modified mode [ 'README.md', 420, 438 ]
57 silly gunzTarPerm extractEntry tests.js
58 silly gunzTarPerm modified mode [ 'tests.js', 420, 438 ]
59 silly gunzTarPerm extractEntry foo.js
60 silly gunzTarPerm modified mode [ 'foo.js', 420, 438 ]
61 silly gunzTarPerm extractEntry include.js
62 silly gunzTarPerm modified mode [ 'include.js', 420, 438 ]
63 silly gunzTarPerm extractEntry .travis.yml
64 silly gunzTarPerm modified mode [ '.travis.yml', 420, 438 ]
65 silly gunzTarPerm extractEntry ChangeLog
66 silly gunzTarPerm modified mode [ 'ChangeLog', 420, 438 ]
67 silly gunzTarPerm extractEntry #wscript#
68 silly gunzTarPerm modified mode [ '#wscript#', 420, 438 ]
69 silly gunzTarPerm extractEntry binding.gyp
70 silly gunzTarPerm modified mode [ 'binding.gyp', 420, 438 ]
71 silly gunzTarPerm extractEntry src/heapdiff.cc
72 silly gunzTarPerm modified mode [ 'src/heapdiff.cc', 420, 438 ]
73 silly gunzTarPerm extractEntry src/heapdiff.hh
74 silly gunzTarPerm modified mode [ 'src/heapdiff.hh', 420, 438 ]
75 silly gunzTarPerm extractEntry src/init.cc
76 silly gunzTarPerm modified mode [ 'src/init.cc', 420, 438 ]
77 silly gunzTarPerm extractEntry src/memwatch.cc
78 silly gunzTarPerm modified mode [ 'src/memwatch.cc', 420, 438 ]
79 silly gunzTarPerm extractEntry src/memwatch.hh
80 silly gunzTarPerm modified mode [ 'src/memwatch.hh', 420, 438 ]
81 silly gunzTarPerm extractEntry src/platformcompat.hh
82 silly gunzTarPerm modified mode [ 'src/platformcompat.hh', 420, 438 ]
83 silly gunzTarPerm extractEntry src/util.cc
84 silly gunzTarPerm modified mode [ 'src/util.cc', 420, 438 ]
85 silly gunzTarPerm extractEntry src/util.hh
86 silly gunzTarPerm modified mode [ 'src/util.hh', 420, 438 ]
87 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
88 silly gunzTarPerm modified mode [ 'examples/basic_heapdiff.js', 420, 438 ]
89 silly gunzTarPerm extractEntry examples/do_nothing_server.js
90 silly gunzTarPerm modified mode [ 'examples/do_nothing_server.js', 420, 438 ]
91 silly gunzTarPerm extractEntry examples/slightly_leaky.js
92 silly gunzTarPerm modified mode [ 'examples/slightly_leaky.js', 420, 438 ]
93 silly lockFile efe2da6b-ar-C-dev-f-node-modules-memwatch tar://C:\dev\f_\node_modules\memwatch
94 silly lockFile efe2da6b-ar-C-dev-f-node-modules-memwatch tar://C:\dev\f_\node_modules\memwatch
95 silly lockFile 6de61186-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
96 silly lockFile 6de61186-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
97 info preinstall memwatch@0.2.2
98 verbose readDependencies using package.json deps
99 verbose readDependencies using package.json deps
100 silly resolved []
101 verbose about to build C:\dev\f_\node_modules\memwatch
102 info build C:\dev\f_\node_modules\memwatch
103 verbose linkStuff [ false, false, false, 'C:\\dev\\f_\\node_modules' ]
104 info linkStuff memwatch@0.2.2
105 verbose linkBins memwatch@0.2.2
106 verbose linkMans memwatch@0.2.2
107 verbose rebuildBundles memwatch@0.2.2
108 info install memwatch@0.2.2
109 verbose unsafe-perm in lifecycle true
110 info memwatch@0.2.2 Failed to exec install script
111 verbose node_modules\memwatch unbuild
112 info preuninstall memwatch@0.2.2
113 info uninstall memwatch@0.2.2
114 verbose true,C:\dev\f_\node_modules,C:\dev\f_\node_modules unbuild memwatch@0.2.2
115 info postuninstall memwatch@0.2.2
116 error memwatch@0.2.2 install: `node-gyp rebuild`
116 error Exit status 1
117 error Failed at the memwatch@0.2.2 install script.
117 error This is most likely a problem with the memwatch package,
117 error not with npm itself.
117 error Tell the author that this fails on your system:
117 error     node-gyp rebuild
117 error You can get their info via:
117 error     npm owner ls memwatch
117 error There is likely additional logging output above.
118 error System Windows_NT 6.1.7601
119 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "memwatch"
120 error cwd C:\dev\f_\test
121 error node -v v0.10.17
122 error npm -v 1.4.27
123 error code ELIFECYCLE
124 verbose exit [ 1, true ]
