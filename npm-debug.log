0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'memwatch' ]
2 info using npm@1.4.27
3 info using node@v0.10.17
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose cache add [ 'memwatch', null ]
6 verbose cache add name=undefined spec="memwatch" args=["memwatch",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: 'memwatch',
7 verbose parsed url   path: 'memwatch',
7 verbose parsed url   href: 'memwatch' }
8 silly lockFile 6099d716-memwatch memwatch
9 verbose lock memwatch C:\Users\Sam\AppData\Roaming\npm-cache\6099d716-memwatch.lock
10 silly lockFile 6099d716-memwatch memwatch
11 silly lockFile 6099d716-memwatch memwatch
12 verbose addNamed [ 'memwatch', '' ]
13 verbose addNamed [ null, '*' ]
14 silly lockFile 0703982f-memwatch memwatch@
15 verbose lock memwatch@ C:\Users\Sam\AppData\Roaming\npm-cache\0703982f-memwatch.lock
16 silly addNameRange { name: 'memwatch', range: '*', hasData: false }
17 verbose request where is /memwatch
18 verbose request registry https://registry.npmjs.org/
19 verbose request id 2739c7f9c31bbd7e
20 verbose url raw /memwatch
21 verbose url resolving [ 'https://registry.npmjs.org/', './memwatch' ]
22 verbose url resolved https://registry.npmjs.org/memwatch
23 verbose request where is https://registry.npmjs.org/memwatch
24 info trying registry request attempt 1 at 22:01:47
25 verbose etag "5GY4LKXVRBQM12XXYX7OYIIMK"
26 http GET https://registry.npmjs.org/memwatch
27 http 304 https://registry.npmjs.org/memwatch
28 silly registry.get cb [ 304,
28 silly registry.get   { date: 'Wed, 24 Sep 2014 20:01:38 GMT',
28 silly registry.get     server: 'Apache',
28 silly registry.get     via: '1.1 varnish',
28 silly registry.get     'last-modified': 'Wed, 24 Sep 2014 20:01:38 GMT',
28 silly registry.get     'cache-control': 'max-age=60',
28 silly registry.get     etag: '"5GY4LKXVRBQM12XXYX7OYIIMK"',
28 silly registry.get     'x-served-by': 'cache-ams4133-AMS',
28 silly registry.get     'x-cache': 'HIT',
28 silly registry.get     'x-cache-hits': '1',
28 silly registry.get     'x-timer': 'S1411588898.655300,VS0,VE0',
28 silly registry.get     vary: 'Accept',
28 silly registry.get     'content-length': '0',
28 silly registry.get     'keep-alive': 'timeout=10, max=50',
28 silly registry.get     connection: 'Keep-Alive' } ]
29 verbose etag https://registry.npmjs.org/memwatch from cache
30 silly addNameRange number 2 { name: 'memwatch', range: '*', hasData: true }
31 silly addNameRange versions [ 'memwatch',
31 silly addNameRange   [ '0.1.0',
31 silly addNameRange     '0.1.1',
31 silly addNameRange     '0.1.2',
31 silly addNameRange     '0.1.3',
31 silly addNameRange     '0.1.4',
31 silly addNameRange     '0.1.5',
31 silly addNameRange     '0.2.0',
31 silly addNameRange     '0.2.1',
31 silly addNameRange     '0.2.2' ] ]
32 verbose addNamed [ 'memwatch', '0.2.2' ]
33 verbose addNamed [ '0.2.2', '0.2.2' ]
34 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
35 verbose lock memwatch@0.2.2 C:\Users\Sam\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
36 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
37 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
38 silly lockFile 0703982f-memwatch memwatch@
39 silly lockFile 0703982f-memwatch memwatch@
40 silly resolved [ { name: 'memwatch',
40 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
40 silly resolved     version: '0.2.2',
40 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
40 silly resolved     engines: { node: '>= 0.6.0' },
40 silly resolved     repository:
40 silly resolved      { type: 'git',
40 silly resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
40 silly resolved     main: 'include.js',
40 silly resolved     licenses: [ [Object] ],
40 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
40 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
40 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
40 silly resolved     contributors: [ [Object], [Object], [Object] ],
40 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
40 silly resolved     readmeFilename: 'README.md',
40 silly resolved     _id: 'memwatch@0.2.2',
40 silly resolved     dist:
40 silly resolved      { shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
40 silly resolved        tarball: 'http://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' },
40 silly resolved     _from: 'memwatch@',
40 silly resolved     _npmVersion: '1.2.14',
40 silly resolved     _npmUser: { name: 'lloyd', email: 'lloyd@hilaiel.com' },
40 silly resolved     maintainers: [ [Object] ],
40 silly resolved     directories: {},
40 silly resolved     _shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
40 silly resolved     _resolved: 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz',
40 silly resolved     gypfile: true,
40 silly resolved     homepage: 'https://github.com/lloyd/node-memwatch' } ]
41 info install memwatch@0.2.2 into C:\Program Files\nodejs
42 info installOne memwatch@0.2.2
43 verbose node_modules\memwatch unbuild
44 verbose tar unpack C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
45 silly lockFile 549c2875-les-nodejs-node-modules-memwatch tar://C:\Program Files\nodejs\node_modules\memwatch
46 verbose lock tar://C:\Program Files\nodejs\node_modules\memwatch C:\Users\Sam\AppData\Roaming\npm-cache\549c2875-les-nodejs-node-modules-memwatch.lock
47 silly lockFile 6de61186-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
48 verbose lock tar://C:\Users\Sam\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz C:\Users\Sam\AppData\Roaming\npm-cache\6de61186-cache-memwatch-0-2-2-package-tgz.lock
49 silly gunzTarPerm modes [ '777', '666' ]
50 error Error: EPERM, mkdir 'C:\Program Files\nodejs\node_modules\memwatch'
50 error  { [Error: EPERM, mkdir 'C:\Program Files\nodejs\node_modules\memwatch']
50 error   errno: 50,
50 error   code: 'EPERM',
50 error   path: 'C:\\Program Files\\nodejs\\node_modules\\memwatch',
50 error   fstream_type: 'Directory',
50 error   fstream_path: 'C:\\Program Files\\nodejs\\node_modules\\memwatch',
50 error   fstream_class: 'DirWriter',
50 error   fstream_stack:
50 error    [ 'C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\fstream\\lib\\dir-writer.js:36:23',
50 error      'C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\mkdirp\\index.js:46:53',
50 error      'Object.oncomplete (fs.js:107:15)' ] }
51 error Please try running this command again as root/Administrator.
52 error System Windows_NT 6.1.7601
53 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "-g" "memwatch"
54 error cwd C:\dev\f_
55 error node -v v0.10.17
56 error npm -v 1.4.27
57 error path C:\Program Files\nodejs\node_modules\memwatch
58 error fstream_path C:\Program Files\nodejs\node_modules\memwatch
59 error fstream_type Directory
60 error fstream_class DirWriter
61 error code EPERM
62 error errno 50
63 error stack Error: EPERM, mkdir 'C:\Program Files\nodejs\node_modules\memwatch'
64 error fstream_stack C:\Program Files\nodejs\node_modules\npm\node_modules\fstream\lib\dir-writer.js:36:23
64 error fstream_stack C:\Program Files\nodejs\node_modules\npm\node_modules\mkdirp\index.js:46:53
64 error fstream_stack Object.oncomplete (fs.js:107:15)
65 verbose exit [ 50, true ]
